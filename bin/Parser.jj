/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/options
{
	             
	               
}

PARSER_BEGIN(Parser)

import java.io.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/}

PARSER_END(Parser)

SKIP:
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| < "%" (~["\n","\r"])* ("\n"|"\r") >
}

TOKEN:
{
	< NIL : ["N","n"] ["I","i"] ["L","l"] >
}

TOKEN:
{
  
	< LPAR : "(" >
	| < RPAR : ")" >
	| < TICK : "'" >
	| < INTEGER : (["0"-"9"])+ | "-" (["0"-"9"])+ >
	| < FLOAT : ((["0"-"9"])* "." (["0"-"9"])+) | ("-" (["0"-"9"])* "." (["0"-"9"])+) >
	| < LAMBDA : "\\" | "lambda" >
	| < LET : "let">
	| < LETREC : "letrec" >
	| < ADD_OP : "+" >
	| < SUB_OP : "-" >
	| < CAR : "car" >
	| < CDR : "cdr" >
	| < CONS : "cons" >
}

TOKEN:
{
  
	< IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >
	| < #LETTER: ["_", "A"-"Z", "a"-"z"] >
	| < #DIGIT: ["0"-"9"] >
}

TOKEN:
{
	< ERROR : ~[] >
}

ASTLispNode prog()          :
{/*@bgen(jjtree) LispNode */
  ASTLispNode jjtn000 = new ASTLispNode(JJTLISPNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String s; }
{/*@bgen(jjtree) LispNode */
        try {
/*@egen*/
  
	(
		LOOKAHEAD(2) s = list() { /*System.out.println(s);*/ }
		| s = atom() { /*System.out.println(s);*/ }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.name = "root"; return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String list()      :
{/*@bgen(jjtree) List */
  ASTList jjtn000 = new ASTList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String s; String ret = ""; }
{/*@bgen(jjtree) List */
        try {
/*@egen*/
  
	
	(	  (
	  { ret += "("; }	  <LPAR>
		(
		LOOKAHEAD(2) s =  list() { ret += s; }
		| s = atom() { ret += s + " "; }
		)*
	  <RPAR>
	  ) |
	  (
	  { ret += "'("; }	
	  <TICK>
	  <LPAR>
	  	(
		LOOKAHEAD(2) s =  list() { ret += s; }
		| s = atom() { ret += s + " "; }
	  	)*
	  <RPAR>
	  )
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		ret += ") ";
		jjtn000.name = ret;
		jjtn000.type = "list";
		return ret;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String atom()      :
{/*@bgen(jjtree) Atom */
  ASTAtom jjtn000 = new ASTAtom(JJTATOM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token n; String l; }
{/*@bgen(jjtree) Atom */
      try {
/*@egen*/      n = <NIL>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/     	{ jjtn000.name = n.image; jjtn000.type = "nil"; jjtn000.value = null; return n.image; }
	| n = <INTEGER>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 	{ jjtn000.name = n.image; jjtn000.type = "int"; jjtn000.value = n.getValue(); return n.image; }
	| n = <FLOAT>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/		{ jjtn000.name = n.image; jjtn000.type = "float"; jjtn000.value = n.getValue(); return n.image; }
	| n = <IDENTIFIER>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 	{ jjtn000.name = n.image; jjtn000.type = "ident"; return n.image; }
	| n = <LAMBDA>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/  	{ jjtn000.name = n.image; jjtn000.type = "lambda"; l = lambdaExpr(); return "lambda" + l; }  
	| n = <ADD_OP>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/  	{ jjtn000.name = n.image; jjtn000.type = "operator"; l = addExpr(); return n.image + l; }
	| n = <SUB_OP>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/  	{ jjtn000.name = n.image; jjtn000.type = "operator"; l = subExpr(); return n.image + l; }
	| n = <CAR>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 		{ jjtn000.name = n.image; jjtn000.type = "car"; l = car(); return n.image + l; }
	| n = <CDR>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 		{ jjtn000.name = n.image; jjtn000.type = "cdr"; l = cdr(); return n.image + l; }
	| n = <CONS>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 		{ jjtn000.name = n.image; jjtn000.type = "cons"; l = cons(); return n.image + l; }
	| n = <LET>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 		{ jjtn000.name = n.image; jjtn000.type = "let"; l = let(); return n.image + l; }
	| n = <LETREC>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 		{ jjtn000.name = n.image; jjtn000.type = "let"; l = let(); return n.image + l; }/*@bgen(jjtree)*/
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/	
}

String car()     :
{/*@bgen(jjtree) car */
  ASTcar jjtn000 = new ASTcar(JJTCAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String s; String ret = " "; }
{/*@bgen(jjtree) car */
        try {
/*@egen*/
  	//<TICK>
	    
	(
		s = list() { ret += s; }
		| s = atom() { ret += s; }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{ jjtn000.name = ret; jjtn000.type = "car"; return ret; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String cdr()     :
{/*@bgen(jjtree) cdr */
  ASTcdr jjtn000 = new ASTcdr(JJTCDR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String s; String ret = " "; }
{/*@bgen(jjtree) cdr */
        try {
/*@egen*/
  
	//<TICK>

	(
		s = list() { ret += s; }
		| s = atom() { ret += s; }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{ jjtn000.name = ret; jjtn000.type = "cdr"; return ret; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String cons()      :
{/*@bgen(jjtree) cons */
  ASTcons jjtn000 = new ASTcons(JJTCONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String s; String t; String ret = " "; }
{/*@bgen(jjtree) cons */
        try {
/*@egen*/
  
	//<TICK>

	(
		s = list() { ret += s; }
		| s = atom() { ret += s; }
	)
	
	//<TICK>	
	
	(
		t = list() { ret += t; }
		| t = atom() { ret +=" "+ t; }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{ jjtn000.name = ret; jjtn000.type = "cons"; return ret; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String addExpr()         :
{/*@bgen(jjtree) AddExpr */
  ASTAddExpr jjtn000 = new ASTAddExpr(JJTADDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String s; String t; String ret = ""; }
{/*@bgen(jjtree) AddExpr */
        try {
/*@egen*/
	(
		s = list() { ret += s; }
		| s = atom() { ret +=" "+ s; }
	)

	(
		t = list() { ret += t; }
		| t = atom() { ret +=" "+ t; }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{ jjtn000.name = ret; jjtn000.type = "AddExpr"; return ret; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/    
}

String subExpr()         :
{/*@bgen(jjtree) SubExpr */
  ASTSubExpr jjtn000 = new ASTSubExpr(JJTSUBEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String s; String t; String ret = ""; }
{/*@bgen(jjtree) SubExpr */
        try {
/*@egen*/
	(
		s =  list() { ret += s; }
		| s = atom() { ret += " " + s; }
	)

	(
		t = list() { ret += t; }
		| t = atom() { ret += " " + t; }
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{ jjtn000.name = ret; jjtn000.type = "SubExpr"; return ret; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/    
}

String let()         :
{/*@bgen(jjtree) LetExpr */
  ASTLetExpr jjtn000 = new ASTLetExpr(JJTLETEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String a, b, c, ret = "(";}
{/*@bgen(jjtree) LetExpr */
        try {
/*@egen*/
	<LPAR>
	(
	<LPAR>
	a = atom()
	(
		LOOKAHEAD(2) b = list()
		| b = atom()
	)

	<RPAR>
	{ ret += "(" + a + " " + b + ")"; }
	)+
	<RPAR>

	(
		LOOKAHEAD(2) c = list()
		| c = atom()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/  

 	{ ret +=  ") " + c; jjtn000.name = ret; jjtn000.type = "car";  return ret; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String lambdaExpr()            :
{/*@bgen(jjtree) LambdaExpr */
  ASTLambdaExpr jjtn000 = new ASTLambdaExpr(JJTLAMBDAEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String s, t; String ret = ""; }
{/*@bgen(jjtree) LambdaExpr */
        try {
/*@egen*/
	s = list()
	(
		LOOKAHEAD(2) t = list()
		| t = atom()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ ret = s + t; jjtn000.name = ret; jjtn000.type = "car"; return ret; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
