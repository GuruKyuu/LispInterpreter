import java.util.Map;

/* Generated By:JJTree: Do not edit this line. ASTList.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTList extends SimpleNode {
	
  public ASTList(int id) {
    super(id);
  }

  public ASTList(Parser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(ParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
  
  public SimpleNode interpret(Environment env) {
	  /*for(Map.Entry<String, SimpleNode> m : env.idList.entrySet())
		  System.out.println("Hello Dolly " + this.name + " " + m.toString());*/
	  if (((SimpleNode)jjtGetChild(0)).type.equals("operator")) {
		  return ((SimpleNode)jjtGetChild(1)).interpret(env);
	  }
	  else if (((SimpleNode)jjtGetChild(0)).type.equals("let")) {
		  return ((SimpleNode)jjtGetChild(1)).interpret(env);
	  } else if (((SimpleNode)jjtGetChild(0)).type.equals("ident")) {
		  Environment tempEnv = new Environment();
		  SimpleNode identity = env.get(((SimpleNode)jjtGetChild(0)).name);
		  //System.out.println("Not cool " + identity.name);
		  SimpleNode identifiers = (SimpleNode) identity.jjtGetChild(1).jjtGetChild(0);
		  //System.out.println("Coolio" + identifiers.name);
		  //System.out.println(identifiers.jjtGetNumChildren());
		  for (int i = 0; i < identifiers.jjtGetNumChildren(); i++) {
			  tempEnv.put(((SimpleNode)identifiers.jjtGetChild(i)).name, ((SimpleNode) jjtGetChild(i + 1)).interpret(env));
		  }
		  for (Map.Entry<String, SimpleNode> e : env.idList.entrySet()) {
			  if (!tempEnv.idList.containsKey(e.getKey())) {
				  tempEnv.put(e.getKey(), e.getValue());
			  }
		  }
		  /*for(Map.Entry<String, SimpleNode> m : tempEnv.idList.entrySet())
			  System.out.println(m.toString());*/
		  return ((SimpleNode)identity.jjtGetChild(1).jjtGetChild(1)).interpret(tempEnv);
	  } else if (((SimpleNode)jjtGetChild(0)).type.equals("car")) {
		  return ((SimpleNode)jjtGetChild(1)).interpret(env);
	  } else if (((SimpleNode)jjtGetChild(0)).type.equals("cdr")) {
		  return ((SimpleNode)jjtGetChild(1)).interpret(env);
	  } else if (((SimpleNode)jjtGetChild(0)).type.equals("cons")) {
		  return ((SimpleNode)jjtGetChild(1)).interpret(env);
	  }
	  else {
		  int children = jjtGetNumChildren();
		  for(int i = 0; i < children; i++)
			  ((SimpleNode)jjtGetChild(i)).interpret(env);
		  return null;
		  }	
  }
}
/* JavaCC - OriginalChecksum=9ffbc7c7d8afd28c0d7e7d47d3e73756 (do not edit this line) */
